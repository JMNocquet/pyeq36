
def parse_command_line():

    ###################################################################
    # NOTES
    # 21/03/2020: all default values are set to None. This allows
    #             to use simultaneously a conf file
    ###################################################################


    ###################################################################
    # IMPORT
    ###################################################################
    
    import argparse
    from argparse import RawTextHelpFormatter
    import sys
    
    ###################################################################
    # PARSE ARGUMENT LINE
    ###################################################################
    
    prog_info="pyeq_kinematic.py : performs a kinematic inversion of slip using GPS time series as input\n"
    prog_info+="--------------------------------------------------------------------------------------------------------------------------------------\n"
    prog_info+="REQUIRED INPUT FOR ALL INVERSION SCHEME\n"
    prog_info+="--------------------------------------------------------------------------------------------------------------------------------------\n"
    prog_info+="    - Input Numpy npz file generated by pyeq_model_make_green.py\n"
    prog_info+="    - Parameters for the inversion\n"
    prog_info+="    - sigma      : regularization value. 1/sigma**2 is the weight given to regularization (Cm-1)\n"
    prog_info+="    - dc         : critical distance in km for building Cm-1\n"
    prog_info+="    - date dates to be provided as a list of decimal dates\n"
    prog_info+="    - dir_ts directory of time series to be included in the inversion (.pos format)\n"
    
    prog_info+="--------------------------------------------------------------------------------------------------------------------------------------\n"
    
    prog_epilog="J.-M. Nocquet (Geoazur-CNRS) - July 2016"
    
    #----------------------------------------------------------
    # REQUIRED INPUT FOR ALL INVERSION SCHEME
    #----------------------------------------------------------
    
    parser = argparse.ArgumentParser(description=prog_info,epilog=prog_epilog,formatter_class=RawTextHelpFormatter)
    
    ###########################################################################
    # CONF
    ###########################################################################
    parser.add_argument('-conf', \
                        action='store', \
                        dest='conf',\
                        type=str,\
                        required=True,\
                        help='pyeq configuration file')
    
    ###########################################################################
    # GEOMETRY
    ###########################################################################
    parser.add_argument('-input_npz', \
                        action='store', \
                        dest='input_npz',\
                        type=str,\
                        default=None,\
                        help='input npz file including all information')

    parser.add_argument('-geometry_range_lon', \
                        action='store',\
                        dest='geometry_range_lon',\
                        type=str,\
                        default=None,\
                        help='removes all subfaults with centroid strictly outside the provided longitude range [min_lon,max_lon] (unit dec.deg)')
    
    parser.add_argument('-geometry_range_lat', \
                        action='store',\
                        dest='geometry_range_lat',\
                        type=str,default=None,\
                        help='removes all subfaults with centroid strictly outside the provided latitude range [min_lon,max_lon] (unit dec.deg)')
    
    parser.add_argument('-geometry_range_depth',\
                        action='store',\
                        dest='geometry_range_depth',\
                        type=str,\
                        default=None,\
                        help='removes all subfaults with centroid strictly outside the provided longitude range [min_depth,max_depth] (unit km)')
    
    parser.add_argument('-geometry_remove_idx', \
                        action='store',\
                        dest='geometry_remove_idx',\
                        type=str,default=None,\
                        help='list of index of dislocation to be removed ')
    
    ###########################################################################
    # REGULARIZATION
    ###########################################################################
    parser.add_argument('-dc', \
                        action='store', \
                        dest='dc',\
                        type=float,default=None,\
                        help='Correlation length in km')
    
    parser.add_argument('-sigma', \
                        action='store' ,\
                        dest='sigma', \
                        default=None, \
                        type=str, \
                        help='sigma in mm controlling the regularization weight. '+\
                        'Can also be provided as /sdotmax/sdotmin/relaxation_time')

    parser.add_argument('-tau', \
                        action='store' ,\
                        dest='tau',\
                        default=None,\
                        type=float, \
                        help='correlation time for temporal smoothing')

    parser.add_argument('-cm_type', \
                        action='store',\
                        dest='cm_type',\
                        type=str,\
                        default=None,\
                        help='Correlation matrix type')

    parser.add_argument('-cm_norm', \
                        action='store' ,\
                        dest='cm_norm', \
                        default=None,\
                        type=str, \
                        help='normalization for spatial model covariance')

    
    parser.add_argument('-m0', \
                        action='store' ,\
                        dest='m0',  \
                        default=None, \
                        type=float, \
                        help='a priori model')

    ###########################################################################
    # RAKE
    ###########################################################################

    parser.add_argument('-rake_type', \
                        action='store' ,\
                        dest='rake_type', \
                        default=None,\
                        type=str, \
                        help='rake_type: Euler or constant')
    
    parser.add_argument('-rake_value', \
                        action='store' , \
                        dest='rake_value', \
                        default=None, \
                        type=str, \
                        help='Euler pole /long/lat/w/style '+\
                        '(style among inverse, normal, leftlateral,rightlateral) or rake value in degrees')
    
    parser.add_argument('-rake_constraint', \
                        action='store' ,\
                        dest='rake_constraint', \
                        default=None,\
                        type=float, \
                        help='constraint on rake; 0 means fixed; '+
                        'any positive value means sigma on the conjugate rake. This option is not implemented yet.')
    
    ###########################################################################
    # DATES
    ###########################################################################
    parser.add_argument('-dates',\
                        action='store' ,\
                        dest='dates', \
                        default=None, \
                        type=str, \
                        help= \
                        'dates at which the slip estimation will be made' +\
                        '\nOptions available:' +\
                        '\nall:all dates will be used. The start and end dates will be the one available in the time series' +\
                        '\n[yr1,all,yr2]: all dates will be used between yr1 and yr2' +\
                        '\n[yr1,step,yr2]: all dates will be used between yr1 and yr2 by step; ' +\
                        'step can be specified in days like 2d or decimal years' +\
                        '\n[t1,t2,...,tn]: list of dates in decimal years' +\
                        '\n or a file name generated by pyeq_model2_generate_dates_file.py' 
                        )
    
    ###########################################################################
    # INPUT GPS DATA
    ###########################################################################
    parser.add_argument('-rounding', \
                        action='store',\
                        dest='rounding',\
                        type=str,default=None,\
                        help='specify date rounding for both model and observation dates. Choose among day, hour, minute, second.')
    
    parser.add_argument('-dir_ts',\
                        action='store' ,dest='dir_ts',\
                        default=None, \
                        type=str, \
                        help='directory of time series to be included in the inversion (.pos format). Alternatively a pck or tsr file can be specified (more efficient).')
    
    parser.add_argument('-no_up', \
                        action='count', \
                        default=None, \
                        help='do not use the vertical component in the inversion')
    
    parser.add_argument('-s_up', \
                        action='store',\
                        dest='s_up',\
                        type=float,default=None,\
                        help='rescale up uncertainty. default is 5.')
    
    parser.add_argument('-s_h', \
                        action='store',\
                        dest='s_h',\
                        type=float,default=None,\
                        help='rescale horizontal component. default is 1.')

    parser.add_argument('-exclude_gps',\
                        action='append',\
                        dest='lexclude_gps',\
                        type=str,default=None,\
                        help='GPS site to be excluded from inversion.')
    
    ###########################################################################
    # ALGORITHM & INVERSION OPTIONS
    ###########################################################################
    parser.add_argument('-nnls',\
                        action='store',\
                        dest='nnls',\
                        type=str,default=None,\
                        help='non-negative least-squares algorithm. Choose among: '\
                        'scipy_nnls , nnls_predotted , lsqnonneg , nnlsm_block_pivot , nnlsm_activeset , scipy_lsq_linear,'+\
                        'scipy_lbfgsb')
    
    parser.add_argument('-build', \
                        action='store',\
                        dest='build',\
                        type=int,\
                        default=None,\
                        help='specify the routine used to build the normal system. Default is 2')

    ###########################################################################
    # CROSS VALIDATION - ADDED 04/09/2022
    ###########################################################################
    parser.add_argument('--cross_validation',\
                        action='store',\
                        dest='cross_validation',\
                        type=str,default=None,\
                        help='Cross validation option: '\
                        'None, build, run')

    ###########################################################################
    # REGULARIZATION PARAMETERS - ADDED 05/09/2022
    # Only works with Laplacian
    ###########################################################################

    parser.add_argument('--laplacian_regularization',\
                        action='store',\
                        dest='laplacian_regularization',\
                        type=str,default=None,\
                        help='Laplacian regularization parameters D/SRS/SRT/CSS/CST\n'
                             +'(damping in mm/day, slip rate spatial, slip rate temporel, '
                             + 'cumulative slip spatial, cumulative spli temporal)')


    ###########################################################################
    # GENERAL
    ###########################################################################

    parser.add_argument('-mpck', \
                        action='store', \
                        dest='mpck', \
                        default=None, \
                        help='model.mpck file')

    
    parser.add_argument('-save', action='store', default=None, \
                        help='save matrices. Can be N_obs for the observationnal normal system or N for the full (observation and regularization system)')
    parser.add_argument('-no_opt', action='count', default=None, help='stop before doing the inversion')
    parser.add_argument('-verbose', '-v', action='count', default=None, help='verbose mode')
    parser.add_argument('-debug', action='count', default=None, help='debug mode')
    
    
    #----------------------------------------------------------
    # OPTION FOR RESOLUTION TESTS
    #----------------------------------------------------------
    
    # parser.add_argument('--c', action='append' ,dest='c',  default=None, type=str, help='constraints on a specific patch n/value')
    
    #parser.add_argument('--c', action='append' ,dest='c',  default=None, type=str, help='constraints for cumulated slip value for a specific subfault at a given time step e.g.--c index_subfault/slip/time_step/constraint')
    #parser.add_argument('--e', action='append' ,dest='e',  default=None, type=str, help='constraints for final slip value equality for two subfaults e.g.--c index1_subfault/index2_subfault/constraint')
    #parser.add_argument('--x', action='append' ,dest='x',  default=None, type=str, help='constraints on the cumulated slip for a specific area given as subfault index and radius at a given time step e.g.--x index_subfault/radius/slip/time_step/constraint')
    
    
    args = parser.parse_args()
    
    if (len(sys.argv)<2):
        parser.print_help()
        sys.exit()



    return args 
